{"message":"unknown character escape: `e`","code":null,"level":"error","spans":[{"file_name":"/home/solindek/Documents/jail/compiler/jail_error/src/lib.rs","byte_start":686,"byte_end":687,"line_start":24,"line_end":24,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"    println!(\"\\e[0;31m{}\\e[0m: {}\", error_kind.to_string(), message)","highlight_start":16,"highlight_end":17}],"label":"unknown character escape","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal","code":null,"level":"help","spans":[{"file_name":"/home/solindek/Documents/jail/compiler/jail_error/src/lib.rs","byte_start":684,"byte_end":705,"line_start":24,"line_end":24,"column_start":14,"column_end":35,"is_primary":true,"text":[{"text":"    println!(\"\\e[0;31m{}\\e[0m: {}\", error_kind.to_string(), message)","highlight_start":14,"highlight_end":35}],"label":null,"suggested_replacement":"r\"\\e[0;31m{}\\e[0m: {}\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown character escape: `e`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/solindek/Documents/jail/compiler/jail_error/src/lib.rs:24:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"\\e[0;31m{}\\e[0m: {}\", error_kind.to_string(), message)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown character escape\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    println!(\u001b[0m\u001b[0m\u001b[38;5;10mr\"\\e[0;31m{}\\e[0m: {}\"\u001b[0m\u001b[0m, error_kind.to_string(), message)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"unknown character escape: `e`","code":null,"level":"error","spans":[{"file_name":"/home/solindek/Documents/jail/compiler/jail_error/src/lib.rs","byte_start":696,"byte_end":697,"line_start":24,"line_end":24,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"    println!(\"\\e[0;31m{}\\e[0m: {}\", error_kind.to_string(), message)","highlight_start":26,"highlight_end":27}],"label":"unknown character escape","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal","code":null,"level":"help","spans":[{"file_name":"/home/solindek/Documents/jail/compiler/jail_error/src/lib.rs","byte_start":684,"byte_end":705,"line_start":24,"line_end":24,"column_start":14,"column_end":35,"is_primary":true,"text":[{"text":"    println!(\"\\e[0;31m{}\\e[0m: {}\", error_kind.to_string(), message)","highlight_start":14,"highlight_end":35}],"label":null,"suggested_replacement":"r\"\\e[0;31m{}\\e[0m: {}\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown character escape: `e`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/solindek/Documents/jail/compiler/jail_error/src/lib.rs:24:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"\\e[0;31m{}\\e[0m: {}\", error_kind.to_string(), message)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown character escape\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    println!(\u001b[0m\u001b[0m\u001b[38;5;10mr\"\\e[0;31m{}\\e[0m: {}\"\u001b[0m\u001b[0m, error_kind.to_string(), message)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
